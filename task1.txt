
Our problem consists of a framework class with two dimensions, the theme and the web application.

We want to be able to change the theme without changing the web application.

The Bridge pattern allows us to do this.

We create the abstration, which is our WebApp that can extend into different types of web applications.

We then create out implementation interface that defines the methods that the concrete implementations must implement.

We then create the concrete implementations, which are the different themes.

When we want to change the theme, we change the concrete implementation assigned to the WebApp.

This allows us to change the theme without changing the web application, as a bonus this allows us to change the theme at runtime.

When we want to add a new web application we create a new class that extends the WebApp class, and update the themes to support the new web application.

When we want to add a new theme we add a new concrete implementation.

This allows us to add a new theme without changing the web application.

 